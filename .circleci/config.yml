version: 2.1

orbs:
  terraform: circleci/terraform@3.1

executors:
  docker-executor:
    docker:
      - image: circleci/python:3.8

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: docker build -t weather-app .
      # - run:
      #     name: Test Docker Image
      #     command: |
      #       python3 site-reachable.py
      #       # Send test report to Discord
      #       curl -X POST -H "Content-Type: application/json" -d '{"content": "Test report"}' DISCORD_WEBHOOK_URL
      - run:
          name: Upload to GitLab Container Registry
          command: |
            docker login registry.gitlab.com -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
            docker tag weather-app registry.gitlab.com/strukov.sergei.999/weatherapp
            docker push registry.gitlab.com/strukov.sergei.999/weatherapp

  terraform:
    executor: docker-executor
    steps:
      - checkout
      - terraform/install:
        terraform_version: "1.3"
      - run:
          name: Terraform Init
          command: terraform init
      - run:
          name: Terraform Validate
          command: terraform validate
      - run:
          name: Install Terratest
          command: go get github.com/gruntwork-io/terratest/modules/terraform
      - run:
          name: Run Terratest
          command: |
            go test -v terratest -timeout 99999999s

      - run:
          name: Install Checkov
          command: pip install checkov
      - run:
          name: Run Checkov
          command: checkov -d .
      - run:
          name: Terraform Plan
          command: terraform plan -out=tfplan
      - run:
          name: Terraform Apply
          command: terraform apply -auto-approve tfplan

  deploy:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Install ArgoCD
          command: |
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x argocd-linux-amd64
            mv argocd-linux-amd64 /usr/local/bin/argocd
      - run:
          name: Deploy to EKS
          command: |
            aws eks --region us-west-2 update-kubeconfig --name your-cluster-name
            argocd app create weather-app --repo https://github.com/yourusername/weather-app.git --path . --dest-server https://kubernetes.default.svc --dest-namespace default
            argocd app sync weather-app

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - terraform:
          requires:
            - build
      - deploy:
          requires:
            - terraform
