version: 2.1

orbs:
  terraform: circleci/terraform@3.1
  go: circleci/go@1.11.0
  aws-cli: circleci/aws-cli@4.0

executors:
  docker-executor:
    docker:
      - image: circleci/python:3.8

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: docker build -t weather-app .
      # - run:
      #     name: Test Docker Image
      #     command: |
      #       python3 site-reachable.py
      #       # Send test report to Discord
      #       curl -X POST -H "Content-Type: application/json" -d '{"content": "Test report"}' DISCORD_WEBHOOK_URL
      - run:
          name: Upload to GitLab Container Registry
          command: |
            docker login registry.gitlab.com -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
            docker tag weather-app registry.gitlab.com/strukov.sergei.999/weatherapp
            docker push registry.gitlab.com/strukov.sergei.999/weatherapp

  terraform:
    executor: docker-executor
    steps:
      - checkout
      - terraform/install:
          terraform_version: "1.3.10"
      # - go/install:
      #     version: "1.18"
      # - run:
      #     name: Run Terratest
      #     command: |
      #       cd terratests
      #       go mod init terratests
      #       go mod tidy
      #       go get github.com/gruntwork-io/terratest/modules/terraform
      #       go get github.com/stretchr/testify/assert
      #       go test -v -timeout 99999999s
      # - run:
      #     name: Install Checkov
      #     command: pip install checkov
      # - run:
      #     name: Run Checkov
      #     command: checkov -d tf || true
      - run:
          name: Terraform 
          command: |
            cd tf
            terraform init
            # terraform destroy -auto-approve
            terraform plan -out=tfplan
            terraform apply -auto-approve tfplan

  deploy:
    executor: docker-executor
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Install ArgoCD
          command: |
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x argocd-linux-amd64
            sudo mv argocd-linux-amd64 /usr/local/bin/argocd
      - run:
          name: Configure kubectl for EKS
          command: |
            aws eks --region eu-west-3 update-kubeconfig --name eks-prod
            kubectl get nodes
      - run:
# check comment
          name: Deploy ArgoCD to EKS
          command: |
            # kubectl create namespace argocd
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.8.4/manifests/install.yaml
            kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
      - run:
          name: ArgoCD
          command: |
            sleep 40
            ARGOCD_SERVER=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            PASS=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo)
            argocd login $ARGOCD_SERVER --username admin --password $PASS --insecure
      - run:
          name: Deploy to EKS
          command: |
            argocd app create weather-app --repo https://github.com/StrukovSergei/weatherapp-k8s --path . --dest-server https://kubernetes.default.svc --dest-namespace default
            argocd app sync weather-app

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - terraform:
          requires:
            - build
      - deploy:
          requires:
            - terraform
